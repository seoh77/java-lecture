package exception.basic.checked;

/*
    예외 계층
    - Object : 자바에서 기본형을 제외한 모든 것은 객체다. 예외도 객체이다. 모든 객체의 최상위 부모는 Object 이므로 예외의 최상위 부모도 Object이다.
    - Throwable : 최상위 예외로, 하위에 Exception과 Error가 있다.
    - Error : 메모리 부족이나 심각한 시스템 오류와 같이 애플리케이션에서 복구가 불가능한 시스템 예외이다.
        => 애플리케이션 개발자는 이 예외를 잡으려고 해서는 안된다.
    - Exception : 체크 예외
        - 애플리케이션 로직에서 사용할 수 있는 실질적인 최상위 예외
        - Exception과 그 하위 예외는 모두 컴파일러가 체크하는 체크 예외이다. 단 RuntionException은 예외로 한다.
    - RuntimeException : 언체크 예외, 런타임 예외
        - 컴파일러가 체크하지 않는 언체크 예외
        - RuntimeException과 그 자식 예외는 모두 언체크 예외이다.

    체크 예외 vs 언체크 예외(런타임 예외)
    - 체크 예외는 발생한 예외를 개발자가 명시적으로 처리해야 한다. 그렇지 않으면 컴파일 오류가 발생한다.
    - 언체크 예외는 개발자가 발생한 예외를 명시적으로 처리하지 않아도 된다.

    주의!
    상속 관계에서 부모 타입은 자식을 담을 수 있다. 이 개념이 예외 처리에도 적용되어 상위 예외를 `catch`로 잡으면 그 하위 예외까지 함께 잡는다.
    따라서 애플리케이션 로직에서는 `Throwable` 예외를 잡으면 안되는데, 이는 잡으면 안되는 Error 예외도 함께 잡을 수 있기 때문이다.
    애플리케이션 로직은 Exception 부터 필요한 예외로 생각하고 잡으면 된다.
 */

/*
    체크 예외의 장단점
    - 장점 : 개발자가 실수로 예외를 누락하지 않도록 컴파일러를 통해 문제를 잡아주는 훌륭한 안전 장치이다.
            이를 통해 개발자는 어떤 체크 예외가 발생하는지 쉽게 파악할 수 있다.
    - 단점 : 하지만 실제로는 개발자가 모든 체크 예외를 반드시 잡거나 던지도록 처리해야 하기 때문에, 번거로운 일이 된다.
            크게 신경쓰고 싶지 않은 예외까지 모두 챙겨야 한다.
 */

/**
 * Exception을 상속받은 예외는 체크 예외가 된다.
 */
public class MyCheckedException extends Exception {
    public MyCheckedException(String message) {
        super(message);
    }
}
