package poly.ex5;

/*
    순수 추상 클래스
    - 인스턴스를 생성할 수 없다.
    - 상속시 모든 메서드를 오버라이딩 해야 한다.
    - 주로 다형성을 위해 사용된다.

    인터페이스는 위의 순수 추상 클래스와 같다. 여기에 약간의 편의 기능이 추가된다.
    - 인터페이스의 메서드는 모두 `public`, `abstract` 이다.
    - 메서드에 `public abstract`를 생략할 수 있다. -> 생략이 권장된다.
    - 인터페이스는 다중 구현(다중 상속)을 지원한다.
    - 인터페이스에서 멤버 변수는 `public`, `static`, `final`이 모두 포함되었다고 간주된다. 따라서 생략 가능하며, 생략이 권장된다.

    인터페이스를 사용해야 하는 이유
    - 제약 : 인터페이스를 만드는 이유는 인터페이스를 구현하는 곳에서 인터페이스의 메서드를 반드시 구현하라는 규약(제약)을 주는 것이다.
            그런데 순수 추상 클래스의 경우 추후에 실행 가능한 메서드를 끼워 넣을 수 있다.
            그렇게 되면 추가된 기능을 자식 클래스에서 구현하지 않을 수도 있고, 또 더는 순수 추상 클래스가 아니게 된다.
            인터페이스는 모든 멧드가 추상 메서드이기 때문에 이런 문제를 원천 차단할 수 있다.
    - 다중 구현 : 자바에서 클래스 상속은 부모를 하나만 지정할 수 있다. 반면에 인터페이스는 부모를 여러명 두는 다중 구현(다중 상속)이 가능하다.
 */

public interface InterfaceAnimal {
    void sound();   // public abstract 생략
    void move();   // public abstract 생략
}
